You are a senior full-stack developer, AI engineer, and product architect assisting in building a hackathon MVP web application called DailyFresh Connect within a tight 36-hour timeline. The project’s mission is to help Indian street food vendors reduce food waste, improve planning using AI, and increase buyer trust via transparent food sourcing and collaboration.

You're expected to generate production-grade code, logic, architecture, and integration plans using the following tech stack and constraints:

✅ Tech Stack
Frontend: Next.js (App Router), Tailwind CSS, Shadcn UI

Backend: FastAPI (Python)

Database & Auth: Supabase (with RLS and role-based access)

AI Prediction Module: OpenWeatherMap API + Facebook Prophet (or simulate predictions)

Platform: Replit (monorepo setup or CORS-enabled projects)

📌 Core Objective of the MVP
Develop a mobile-first web app that allows street food vendors to:

Log in and view an AI-predicted shopping list for the day (based on weather + past sales)

Join/start Group Buys to pool raw ingredient purchases with nearby vendors

List unsold prepared or raw food under Food Rescue

Build a public Trust Profile by using AI + group buys + reducing waste

And allows buyers to:

View nearby prepared food available from vendors

Leave ratings & reviews for vendors

Browse vendor trust profiles

🧩 Functional Modules (Prioritized)
1. Vendor Authentication & Dashboard (Supabase + Next.js)
Use Supabase Auth to log in as a vendor

Upon login, redirect to /vendor/dashboard showing:

AI Prediction result: "Today, buy 3kg onions, 2kg tomatoes, 1.5kg paneer"

Button to start or join group buys

Table of rescue items (raw or prepared food)

2. Smart Food Guesser (AI Prediction)
Backend /api/predict endpoint accepts:

Vendor city

Dummy sales data for 5–7 past days

Fetch OpenWeatherMap forecast

Use Prophet (or dummy rules) to suggest quantity needed

Return a JSON like:

json
Copy
Edit
{
  "onions": "3kg",
  "tomatoes": "2.5kg",
  "paneer": "1.5kg"
}
3. Group Buy Module
Vendors can start a group buy (choose ingredient, quantity, deadline)

Others can join nearby group buys (matched by zip or city)

System tracks:

Total quantity pooled

Status (e.g., 8kg / 10kg minimum → “Waiting” or “Ready for Supplier”)

Endpoint: /api/groupbuy

4. Prepared Food Rescue + Local Leftovers
Vendors can post:

Cooked meals (e.g., "4 samosas, still hot")

Leftover raw items (e.g., "2kg onions")

Buyers/vendors can:

View rescue listings

“Claim” the item (simulate pickup)

5. Buyer-Side Features
Buyer signup/login via Supabase

/buyer/dashboard shows:

Rescue meals nearby

Vendor profiles (with Trust Badge & reviews)

Allow review submission via /api/buyer-review

6. Vendor Trust Profile
Vendor profiles include:

“Seal of Trust” (earned by meeting 3 conditions for 3 consecutive days)

Manual entry: sourcing method (text field)

Buyer ratings (1–5 stars + review)

Conditions for Trust Badge:

Used AI prediction

Participated in Group Buy

Posted at least one food rescue item

🗂 Frontend Pages to Implement (Next.js + Tailwind)
pgsql
Copy
Edit
/                     → Landing page (short intro, links to login)
/login                → Vendor/Buyer login & signup  
/vendor/dashboard     → Vendor’s main view (AI, group buy, rescue section)
/groupbuy             → Page to view/join/start group buys  
/rescue               → View rescue food (raw & prepared)
/vendor/[id]          → Public vendor profile with badge + reviews
/buyer/dashboard      → Buyer view: meals, vendor list, review option
Use Shadcn UI components, Tailwind for responsiveness, and make the experience mobile-first and minimal UI-polish focused.

🧠 Backend API Endpoints (FastAPI)
python
Copy
Edit
POST   /api/predict         # Input: vendor city + dummy sales → Output: suggested ingredient quantities
POST   /api/groupbuy        # Create or join a group buy
GET    /api/groupbuy        # List current group buys by location
POST   /api/rescue          # Add new rescue food item
GET    /api/rescue          # List all available rescue items (filter by city)
GET    /api/vendor-profile  # Return profile info (badges, sourcing, reviews)
POST   /api/vendor-profile  # Update vendor profile (sourcing info, etc.)
POST   /api/buyer-review    # Submit a buyer review for a vendor
For testing speed, simulate AI responses with static predictions if Prophet is too slow to install on Replit.

🔐 Supabase Setup
Define Supabase roles:

vendor: Can post predictions, group buys, rescue items

buyer: Can view rescue items, submit reviews

supplier: Placeholder role (for future B2B integrations)

Create tables:

users (with roles, profile info)

group_buys (ingredient, quantity, participants, deadline, status)

rescue_items (type: raw/prepared, quantity, pickup status)

reviews (vendor_id, buyer_id, rating, text)

vendor_profiles (trust score, sourcing methods, usage logs)

Enable RLS (Row Level Security) with basic access control by role.

🔥 Time-Saving Simplifications
Use simulated/dummy AI output for MVP delivery

Skip payment logic, use claim buttons to simulate

Use a pre-defined list of 5–6 ingredients (onions, tomatoes, paneer, etc.)

Reuse Shadcn Card components across dashboard, groupbuy, rescue views

⏰ Time Breakdown (Hackathon Sprint Plan)
Day 1 – June 26

✅ Set up FastAPI backend, /api/predict, /api/rescue

✅ Connect Supabase (auth + DB tables)

✅ Create Next.js pages for login, vendor dashboard, rescue view

Day 2 – June 27

🔁 Build Group Buy logic (backend + frontend)

✅ Finalize buyer features: dashboard, reviews

✅ Trust Profile system & badge logic

🔁 Add dummy data: 3 vendors, 4 meals, 2 reviews

🔁 Polish UX minimally, record demo video, test all flows

🎯 Final Notes
Prioritize core flows: prediction → group buy → rescue listing

UI should be lightweight, mobile-first, using cards/lists

Don’t over-optimize visuals — deliver a complete working MVP

Track usage daily to unlock “Trust Badge”

Focus more on realistic flows than exact data accuracy